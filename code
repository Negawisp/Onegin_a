#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#define initialLength 400000

int inFromFile(char* str, FILE* file)
{
    char temp = fgetc(file);
    int i = 0;
    int ILMultiplier = 0;

    while(!feof(file))
    {
        str[i + ILMultiplier*initialLength] = temp;
        i++;
        temp = fgetc(file);

            // Here's a trial of expanding str with
            // + initialLength elements.
            // However, newStr's calloc is freed after
            // the end of cycle.

        if (i == initialLength)
        {
            i = 0;
            ILMultiplier++;

            char* newStr = calloc(initialLength*(ILMultiplier + 1),
                                  sizeof(char));
            strcat(newStr, str);
            free(str);
            str = newStr;
            newStr = "";
        }

    }
    return 0;
}

int stringsIn(const char* txt)
{
    char curCh = 'p';
    int i = 0;
    int nStrings = 1;

    while (curCh)
    {
        curCh = txt[i];
        if (curCh == '\n')
           nStrings++;
        i++;
    }
    return nStrings;
}

int lengthOf(const char* txt)
{
    int nChars = 0;
    char curCh = txt[nChars];

    while (curCh)
    {
        nChars++;
        curCh = txt[nChars];
    }
    return nChars;
}

void makePoem(char* initial, char** Poem)
{
    int k = 0; //number of CurCh in initial
    int i = 0;
    Poem[i] = &initial[k];

    while(initial[k])
    {
        if (initial[k] == '\n')
        {
            initial[k] = '\0';
            k++;
            i++;
            Poem[i] = &initial[k];
        }
        else k++;
    }
}

int firstLetterNumber(const char* str)
{
    int chN1 = 0;
    while (
              !(
                    ('a' <= str[chN1] && str[chN1] <= 'z')
                 || ('A' <= str[chN1] && str[chN1] <= 'Z')
                 || ('À' <= str[chN1] && str[chN1] <= 'ß')
                 || ('à' <= str[chN1] && str[chN1] <= 'ÿ')
               )
           )
    {
        chN1++;
        if (str[chN1] == '\0') { return (-1); }
    }

    return chN1;
}

int lastLetterNumber(const char* str)
{
    int chN1 = lengthOf(str) - 1;
    while (
              !(
                    ('a' <= str[chN1] && str[chN1] <= 'z')
                 || ('A' <= str[chN1] && str[chN1] <= 'Z')
                 || ('À' <= str[chN1] && str[chN1] <= 'ß')
                 || ('à' <= str[chN1] && str[chN1] <= 'ÿ')
               )
           )
    {
        chN1--;
        if (str[chN1] == '\0') { return (-1); }
    }

    return chN1;
}

int checkAlph(const char* str1, const char* str2, int str1char, int str2char)
{
    // str1char == -1 => str1 has no letters.

    if (str1char == -1)
    {
        if (str2char != -1)
        {
            return 1;
        }
        else return 0;
    }
    else // if (str1char != -1)
        if (str2char == -1) return 0;

    else // if (str1char, str2char != -1)
    {

        if (str1[str1char] != str2[str2char])
        {
            if (str1[str1char] > str2[str2char])
                return 1;
            else
                return 0;
        }

        else //if (str1[str1char] == str2[str2char])
        {
            if (str1[str1char] == '\0')
            {
                return 0;
            }
            else // if (str1[str1char] != '\0')
            {
                if (str2[str2char] == '\0')
                {
                    return 1;
                }
                else //if (str1[str2char], str2[str2char] != '\0')
                {
                    return checkAlph(str1, str2, str1char+1, str2char+1);
                }
            }
        }
    }
}



int checkEndAlph(const char* str1, const char* str2, int str1char, int str2char)
{
    // str1char == -1 => str1 has no letters.

    if (str1char == -1)
    {
        if (str2char != -1)
        {
            return 1;
        }
        else return 0;
    }
    else // if (str1char != -1)
        if (str2char == -1) return 0;

    else // if (str1char, str2char != -1)
    {

        if (str1[str1char] != str2[str2char])
        {
            if (str1[str1char] > str2[str2char])
                return 1;
            else
                return 0;
        }

        else //if (str1[str1char] == str2[str2char])
        {
            if (str1[str1char] == '\0')
            {
                return 0;
            }
            else // if (str1[str1char] != '\0')
            {
                if (str2[str2char] == '\0')
                {
                    return 1;
                }
                else //if (str1[str2char], str2[str2char] != '\0')
                {
                    return checkAlph(str1, str2, str1char-1, str2char-1);
                }
            }
        }
    }
}

/*int swapStr(char* str1, char* str2)
{
    char* temp = calloc(50, sizeof(char));
    printf("\n\n%s\n%s\n%s\n\n", str1, temp, str2);
    temp = str1;
    str1 = str2;
    str2 = temp;
    printf("\n\n%s\n%s\n%s\n\n", str1, temp, str2);
    free(temp);
    return 0;
}*/

int swapStr(char** str, int firstItem, int secondItem)
{
    char *temp = str[firstItem];
    str[firstItem] = str[secondItem];
    str[secondItem] = temp;

    temp = "";
    free("temp");
    return 0;
}

int outStrArray(char** s, int nStrings, FILE* file)
{
    int i = 0;
    for (i = 0; i<nStrings; i++)
    {
        fputs(s[i], file);
        fputs("\n", file);
    }
    return 0;
}

void alphSort (char** s, int from, int to)
{
    int i=0, j=0;

    char* marked = "";
    if ( from >= to) return;
    i = from;
    j = to;
    marked = s[(from + to) / 2];

    while ( i <= j)
    {

        while (checkAlph(marked, s[i], firstLetterNumber(marked), firstLetterNumber(s[i]))) i++;
        while (checkAlph(s[j], marked, firstLetterNumber(s[j]), firstLetterNumber(marked))) j--;
        if (i<=j)
        {
            swapStr(s, i, j);
            i ++;
            j --;
        }
    }


    alphSort(s, from, j);
    alphSort(s, i, to);

    marked = "";
    free(marked);
}

void endSort (char** s, int from, int to)
{
    int i=0, j=0;

    char* marked = calloc(1, sizeof(char));
    if ( from >= to) return;
    i = from;
    j = to;
    marked = s[(from + to) / 2];

    while ( i <= j)
    {

        while
        (checkEndAlph(marked, s[i], lastLetterNumber(marked),
                      lastLetterNumber(s[i])) )
        {
            i++;
        }

        while
        (checkEndAlph(s[j], marked, lastLetterNumber(s[j]),
                      lastLetterNumber(marked)) )
        {
            j--;
        }


        if (i<=j)
        {
            swapStr(s, i, j);
            i ++;
            j --;
        }
    }


    endSort(s, from, j);
    endSort(s, i, to);

    marked = "";
    free(marked);
}

int main()
{
    FILE *input;
    FILE *output;

    input = fopen("input.txt", "r");
    output = fopen("output.txt", "w");

    char* initialStr = calloc(initialLength, sizeof(char));

    inFromFile(initialStr, input);


    int nStrings = stringsIn(initialStr);

    char** poem = calloc(nStrings, sizeof(char*));

    makePoem(initialStr, poem);

    //To do work with user

    alphSort(poem, 0, nStrings-1);
    //endSort(poem, 0, nStrings-1);


    outStrArray(poem, nStrings, output);

    fclose(input);
    fclose(output);
    free(poem);
    free(initialStr);
    return 0;
}

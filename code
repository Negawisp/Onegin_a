#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#define initialLength 400000 Зач? Можно же длину файла измерить

char* inFromFile(FILE* file)
{
    char temp = fgetc(file);
    int i = 0;
    int ILMultiplier = 0; с большой буквы - признак крутых чуваков (на самом деле нет) глобальных переменных
    char* str = calloc(initialLength+1, sizeof(char));

    while(!feof(file))
    {
        str[i + ILMultiplier*initialLength] = temp;
        i++;
        
        temp = fgetc(file); Ыыы, посимвольно... я бы фридом сразу считал. А размер файла фсиком/фтеллом померить
        Хотя, конечно, ты суров

        if (i == initialLength) Рекомендую >=
        {
            i = 0;
            ILMultiplier++;

            char* newStr = calloc(initialLength*(ILMultiplier + 1) + 1,
                                  sizeof(char));
            strcat(newStr, str);
            free(str);
            str = newStr;
        }

    }
    return str;
}

int stringsIn(const char* txt)
{
    char curCh = 'p';
    int i = 0;
    int nStrings = 1;

    while (curCh)
    {
        curCh = txt[i];
        if (curCh == '\n')
           nStrings++;
        i++;
    }
    return nStrings; только здесь становится понятно название функции
}

int lengthOf(const char* txt) strlen? :)
{
    int nChars = 0;
    char curCh = txt[nChars];

    while (curCh)
    {
        nChars++;
        curCh = txt[nChars];
    }
    return nChars;
}

void makePoem(char* initial, char** Poem)
{
    int k = 0; //number of CurCh in initial -- этого коммента никто читать не будет.
               А на самом деле это - ЖЕСТКОСТЬ ПРУЖИНЫ
    int i = 0;
    Poem[i] = &initial[k];

    while(initial[k]) исходная жесткость?
    {
        if (initial[k] == '\n')
        {
            initial[k] = '\0'; исходно идеально нежесткая пружина?
            k++;
            i++;
            Poem[i] = &initial[k];
        }
        else k++; увеличиваем жесткость
    }
}

int firstLetterNumber(const char* str) SkipNonLetters? см. еще strpbrk, strspn
{
    int chN1 = 0;
    while (
              !(
                    ('a' <= str[chN1] && str[chN1] <= 'z')
                 || ('A' <= str[chN1] && str[chN1] <= 'Z')
                 || ('À' <= str[chN1] && str[chN1] <= 'ß')
                 || ('à' <= str[chN1] && str[chN1] <= 'ÿ')
               )
           )
    {
        chN1++;
        if (str[chN1] == '\0') { return (-1); }
    }

    return chN1;
}

int lastLetterNumber(const char* str)
{
    int chN1 = lengthOf(str) - 1;
    while (
              !(
                    ('a' <= str[chN1] && str[chN1] <= 'z')
                 || ('A' <= str[chN1] && str[chN1] <= 'Z')
                 || ('À' <= str[chN1] && str[chN1] <= 'ß')
                 || ('à' <= str[chN1] && str[chN1] <= 'ÿ')
               )
           )
    {
        chN1--;
        if (str[chN1] == '\0') { return (-1); }
    }

    return chN1;
}

int checkAlph(const char* str1, const char* str2, int str1char, int str2char) Альф это такой смешной персонаж из сериала)
{
    // str1char == -1 => str1 has no letters. :````( 

    if (str1char == -1)       ничего не понял про эти -1, +1 и т.п. Очень сложная логика. Должно быть понятно без пояснений
    {                         реально загадочная функция
        if (str2char != -1)   такие обычно вылетают из исходников первыми)
        {
            return 1;
        }
        else return 0;
    }
    else // if (str1char != -1)
        if (str2char == -1) return 0;

    else // if (str1char, str2char != -1)
    {

        if (str1[str1char] != str2[str2char])
        {
            if (str1[str1char] > str2[str2char])
                return 1;
            else
                return 0;
        }

        else //if (str1[str1char] == str2[str2char])
        {
            if (str1[str1char] == '\0')
            {
                return 0;
            }
            else // if (str1[str1char] != '\0')
            {
                if (str2[str2char] == '\0')
                {
                    return 1;
                }
                else //if (str1[str2char], str2[str2char] != '\0')
                {
                    return checkAlph(str1, str2, str1char+1, str2char+1);
                }
            }
        }
    }
}



int checkEndAlph(const char* str1, const char* str2, int str1char, int str2char)
{
    // str1char == -1 => str1 has no letters.

    if (str1char == -1)
    {
        if (str2char != -1)
        {
            return 1;
        }
        else return 0;
    }
    else // if (str1char != -1)
        if (str2char == -1) return 0;

    else // if (str1char, str2char != -1)
    {

        if (str1[str1char] != str2[str2char])
        {
            if (str1[str1char] > str2[str2char])
                return 1;
            else
                return 0;
        }

        else //if (str1[str1char] == str2[str2char])
        {
            if (str1[str1char] == '\0')
            {
                return 0;
            }
            else // if (str1[str1char] != '\0')
            {
                if (str2[str2char] == '\0')
                {
                    return 1;
                }
                else //if (str1[str2char], str2[str2char] != '\0')
                {
                    return checkAlph(str1, str2, str1char-1, str2char-1);
                }
            }
        }
    }
}

int swapStr(char** str1, char** str2)
{
    char* temp = *str1;
    *str1 = *str2;
    *str2 = temp;

    return 0;
}

/*int swapStr(char** str, int firstItem, int secondItem)
{
    char *temp = str[firstItem];
    str[firstItem] = str[secondItem];
    str[secondItem] = temp;

    temp = "";
    free("temp");
    return 0;
}*/

int outStrArray(meow char** s, int nStrings, FILE* file)
{
    for (meow i = 0; i<nStrings; i++)
    {
        fputs(s[i], file);  fprintf
        fputs("\n", file);
    }
    return 0;
}

void alphSort (char** s, int from, int to)
{
    int i=0, j=0; Нет пробелов, дальше не смотрел. Квиксорт? Так бы и назвал

    char* marked = "";
    if ( from >= to) return;
    i = from;
    j = to;
    marked = s[(from + to) / 2];

    while ( i <= j)
    {

        while (checkAlph(marked, s[i], firstLetterNumber(marked), firstLetterNumber(s[i]))) i++;
        while (checkAlph(s[j], marked, firstLetterNumber(s[j]), firstLetterNumber(marked))) j--;
        if (i<=j)
        {
            swapStr(&s[i], &s[j]);
            i ++;
            j --;
        }
    }


    alphSort(s, from, j);
    alphSort(s, i, to);

    marked = "";
    free(marked); free???
}

Ниже копипаст, его надо убрать

void endSort (char** s, int from, int to)
{
    int i=0, j=0;

    char* marked = calloc(1, sizeof(char));
    if ( from >= to) return;
    i = from;
    j = to;
    marked = s[(from + to) / 2];

    while ( i <= j)
    {

        while
        (checkEndAlph(marked, s[i], lastLetterNumber(marked),
                      lastLetterNumber(s[i])) )
        {
            i++;
        }

        while
        (checkEndAlph(s[j], marked, lastLetterNumber(s[j]),
                      lastLetterNumber(marked)) )
        {
            j--;
        }


        if (i<=j)
        {
            swapStr(&s[i], &s[j]);
            i ++;
            j --;
        }
    }


    endSort(s, from, j);
    endSort(s, i, to);

    marked = "";
    free(marked);
}

int main()
{
    FILE *input; неиници....
    FILE *output;

    input == fopen("input.txt", "r");
    input = fopen("output.txt", "w"); муааххахаха

    char* initialStr =  inFromFile(input);             |
                                                       |
    int nStrings = stringsIn(initialStr);              |
                                                       |  В функцию!
    char** poem = calloc(nStrings, sizeof(char*));     |
                                                       |
    makePoem(initialStr, poem);                        |

    //To do work with user

    alphSort(poem, 0, nStrings-1);
    //endSort(poem, 0, nStrings-1);


    outStrArray(poem, nStrings, output);

    fclose(input);
    fclose(output);
    free(poem);
    free(initialStr);
    return 0;
}
